IsSuccess(){
if [ $? == 0 ]
then
    echo  $1"成功------------------------------"
else
    printf '\033[31m%s失败------------------------------\n\033[39m' $1
fi
}
CreateAppDir(){
ln -s /usr/local/etc/ /app
echo -e "\n\n\ncd /app" >> ~/.bashrc
cd /app
IsSuccess "建立符号链接"
}
BackupFile(){
cp /etc/profile /etc/profile.backup && \
cp /etc/ssh/sshd_config /etc/ssh/sshd_config.backup
IsSuccess "备份重要文件"
}
SshConfig(){
cat << EOF >> /etc/ssh/sshd_config
ClientAliveInterval 60
ClientAliveCountMax 10
EOF
IsSuccess "SSH 防断连"
}
TimeZoneConfig(){
timedatectl set-timezone Asia/Shanghai
}
Init(){
CreateAppDir 
BackupFile
SshConfig
TimeZoneConfig
}
AddJava(){
cat << EOF >> /etc/profile
export JAVA_HOME=/app/jdk
export CLASSPATH=\$CLASSPATH:\$JAVA_HOME/lib/
export PATH=\$PATH:\$JAVA_HOME/bin
EOF
wget https://mirrors.tuna.tsinghua.edu.cn/Adoptium/17/jdk/x64/linux/OpenJDK17U-jdk_x64_linux_hotspot_17.0.3_7.tar.gz -O jdk.tar.gz
tar zxvf jdk.tar.gz
rm jdk.tar.gz
mv jdk-17.0.3+7/ jdk
source /etc/profile
java -version
IsSuccess "Java17安装"
}
AddSimpleServer(){
cat << EOF >> SimpleServer.java
import java.io.InputStream;
import java.io.OutputStream;
import java.net.ServerSocket;
import java.net.Socket;
public class Main {
    public static void main(String[] args) {
        int port = 80;
        if(args.length>0) port = Integer.parseInt(args[0]);
        long num = 0;
        try {
            ServerSocket serverSocket = new ServerSocket(port);
            while (true) {
                try {
                    Socket socket = serverSocket.accept();
                    num++;
                    if (num % 2 == 0) {
                        System.out.println(num/2 + "" + socket.getRemoteSocketAddress());
                    }
                    Thread socketThread = new SocketThread(socket);
                    socketThread.start();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
         }
    }
}
class SocketThread extends Thread {
    final Socket socket;
    public SocketThread(Socket socket) {
        this.socket = socket;
    }
    @Override
    public void run() {
        try (InputStream inputStream = socket.getInputStream()) {
            byte[] buffer = new byte[2048];
            inputStream.read(buffer);
            String data = "IP:"+socket.getRemoteSocketAddress()+"<br>"+new String(buffer).replace("\n", "<br>");
            try (OutputStream output = socket.getOutputStream()) {
                output.write("HTTP/1.1 200 OK\r\n".getBytes());
                output.write("Content-Type: text/html\r\n".getBytes());
                output.write(("Content-Length: " + data.length() + "\r\n").getBytes());
                output.write("\r\n".getBytes());
                output.write(data.getBytes());
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                socket.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
}
EOF
}
AddNginx(){
apt-get update && sudo apt-get upgrade -y
apt-get install build-essential libpcre3 libpcre3-dev zlib1g-dev git libssl-dev -y
mkdir nginx_build && cd nginx_build
wget -c https://nginx.org/download/nginx-1.20.2.tar.gz
tar zxf nginx-1.20.2.tar.gz && rm nginx-1.20.2.tar.gz
cd nginx-1.20.2
./configure \
--prefix=/app/nginx \
--with-http_v2_module \
--with-http_ssl_module
make
make install
cd ../..
rm -rf nginx_build
echo -e "\nexport PATH=\$PATH:/app/nginx/sbin\n" >> /etc/profile
source /etc/profile
nginx -v
IsSuccess "nginx编译安装"
cat << EOF > /etc/systemd/system/nginx.service
[Unit]
After=syslog.target network-online.target remote-fs.target nss-lookup.target
Wants=network-online.target
[Service]
Type=forking
ExecStart=/app/nginx/sbin/nginx
[Install]
WantedBy=multi-user.target
EOF
systemctl enable nginx.service
IsSuccess "nginx自启配置"
}
AddNodeJS(){
wget https://nodejs.org/dist/v16.13.0/node-v16.13.0-linux-x64.tar.xz
tar xf node-v16.13.0-linux-x64.tar.xz
mv node-v16.13.0-linux-x64 node
rm -f node-v16.13.0-linux-x64.tar.xz
echo -e "\nexport PATH=\$PATH:/app/node/bin\n" >> /etc/profile
source /etc/profile
node -v
IsSuccess "NodeJs安装"
}