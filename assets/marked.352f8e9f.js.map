{"version":3,"file":"marked.352f8e9f.js","sources":["../../node_modules/marked/lib/marked.esm.js"],"sourcesContent":["/**\n * marked - a markdown parser\n * Copyright (c) 2011-2022, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\nfunction getDefaults() {\n  return {\n    baseUrl: null,\n    breaks: false,\n    extensions: null,\n    gfm: true,\n    headerIds: true,\n    headerPrefix: '',\n    highlight: null,\n    langPrefix: 'language-',\n    mangle: true,\n    pedantic: false,\n    renderer: null,\n    sanitize: false,\n    sanitizer: null,\n    silent: false,\n    smartLists: false,\n    smartypants: false,\n    tokenizer: null,\n    walkTokens: null,\n    xhtml: false\n  };\n}\n\nlet defaults = getDefaults();\n\nfunction changeDefaults(newDefaults) {\n  defaults = newDefaults;\n}\n\n/**\n * Helpers\n */\nconst escapeTest = /[&<>\"']/;\nconst escapeReplace = /[&<>\"']/g;\nconst escapeTestNoEncode = /[<>\"']|&(?!#?\\w+;)/;\nconst escapeReplaceNoEncode = /[<>\"']|&(?!#?\\w+;)/g;\nconst escapeReplacements = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;'\n};\nconst getEscapeReplacement = (ch) => escapeReplacements[ch];\nfunction escape(html, encode) {\n  if (encode) {\n    if (escapeTest.test(html)) {\n      return html.replace(escapeReplace, getEscapeReplacement);\n    }\n  } else {\n    if (escapeTestNoEncode.test(html)) {\n      return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n    }\n  }\n\n  return html;\n}\n\nconst unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\n\n/**\n * @param {string} html\n */\nfunction unescape(html) {\n  // explicitly match decimal, hex, and named HTML entities\n  return html.replace(unescapeTest, (_, n) => {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x'\n        ? String.fromCharCode(parseInt(n.substring(2), 16))\n        : String.fromCharCode(+n.substring(1));\n    }\n    return '';\n  });\n}\n\nconst caret = /(^|[^\\[])\\^/g;\n\n/**\n * @param {string | RegExp} regex\n * @param {string} opt\n */\nfunction edit(regex, opt) {\n  regex = typeof regex === 'string' ? regex : regex.source;\n  opt = opt || '';\n  const obj = {\n    replace: (name, val) => {\n      val = val.source || val;\n      val = val.replace(caret, '$1');\n      regex = regex.replace(name, val);\n      return obj;\n    },\n    getRegex: () => {\n      return new RegExp(regex, opt);\n    }\n  };\n  return obj;\n}\n\nconst nonWordAndColonTest = /[^\\w:]/g;\nconst originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;\n\n/**\n * @param {boolean} sanitize\n * @param {string} base\n * @param {string} href\n */\nfunction cleanUrl(sanitize, base, href) {\n  if (sanitize) {\n    let prot;\n    try {\n      prot = decodeURIComponent(unescape(href))\n        .replace(nonWordAndColonTest, '')\n        .toLowerCase();\n    } catch (e) {\n      return null;\n    }\n    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {\n      return null;\n    }\n  }\n  if (base && !originIndependentUrl.test(href)) {\n    href = resolveUrl(base, href);\n  }\n  try {\n    href = encodeURI(href).replace(/%25/g, '%');\n  } catch (e) {\n    return null;\n  }\n  return href;\n}\n\nconst baseUrls = {};\nconst justDomain = /^[^:]+:\\/*[^/]*$/;\nconst protocol = /^([^:]+:)[\\s\\S]*$/;\nconst domain = /^([^:]+:\\/*[^/]*)[\\s\\S]*$/;\n\n/**\n * @param {string} base\n * @param {string} href\n */\nfunction resolveUrl(base, href) {\n  if (!baseUrls[' ' + base]) {\n    // we can ignore everything in base after the last slash of its path component,\n    // but we might need to add _that_\n    // https://tools.ietf.org/html/rfc3986#section-3\n    if (justDomain.test(base)) {\n      baseUrls[' ' + base] = base + '/';\n    } else {\n      baseUrls[' ' + base] = rtrim(base, '/', true);\n    }\n  }\n  base = baseUrls[' ' + base];\n  const relativeBase = base.indexOf(':') === -1;\n\n  if (href.substring(0, 2) === '//') {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(protocol, '$1') + href;\n  } else if (href.charAt(0) === '/') {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(domain, '$1') + href;\n  } else {\n    return base + href;\n  }\n}\n\nconst noopTest = { exec: function noopTest() {} };\n\nfunction merge(obj) {\n  let i = 1,\n    target,\n    key;\n\n  for (; i < arguments.length; i++) {\n    target = arguments[i];\n    for (key in target) {\n      if (Object.prototype.hasOwnProperty.call(target, key)) {\n        obj[key] = target[key];\n      }\n    }\n  }\n\n  return obj;\n}\n\nfunction splitCells(tableRow, count) {\n  // ensure that every cell-delimiting pipe has a space\n  // before it to distinguish it from an escaped pipe\n  const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n      let escaped = false,\n        curr = offset;\n      while (--curr >= 0 && str[curr] === '\\\\') escaped = !escaped;\n      if (escaped) {\n        // odd number of slashes means | is escaped\n        // so we leave it alone\n        return '|';\n      } else {\n        // add space before unescaped |\n        return ' |';\n      }\n    }),\n    cells = row.split(/ \\|/);\n  let i = 0;\n\n  // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n  if (!cells[0].trim()) { cells.shift(); }\n  if (cells.length > 0 && !cells[cells.length - 1].trim()) { cells.pop(); }\n\n  if (cells.length > count) {\n    cells.splice(count);\n  } else {\n    while (cells.length < count) cells.push('');\n  }\n\n  for (; i < cells.length; i++) {\n    // leading or trailing whitespace is ignored per the gfm spec\n    cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n  }\n  return cells;\n}\n\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param {string} str\n * @param {string} c\n * @param {boolean} invert Remove suffix of non-c chars instead. Default falsey.\n */\nfunction rtrim(str, c, invert) {\n  const l = str.length;\n  if (l === 0) {\n    return '';\n  }\n\n  // Length of suffix matching the invert condition.\n  let suffLen = 0;\n\n  // Step left until we fail to match the invert condition.\n  while (suffLen < l) {\n    const currChar = str.charAt(l - suffLen - 1);\n    if (currChar === c && !invert) {\n      suffLen++;\n    } else if (currChar !== c && invert) {\n      suffLen++;\n    } else {\n      break;\n    }\n  }\n\n  return str.slice(0, l - suffLen);\n}\n\nfunction findClosingBracket(str, b) {\n  if (str.indexOf(b[1]) === -1) {\n    return -1;\n  }\n  const l = str.length;\n  let level = 0,\n    i = 0;\n  for (; i < l; i++) {\n    if (str[i] === '\\\\') {\n      i++;\n    } else if (str[i] === b[0]) {\n      level++;\n    } else if (str[i] === b[1]) {\n      level--;\n      if (level < 0) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\n\nfunction checkSanitizeDeprecation(opt) {\n  if (opt && opt.sanitize && !opt.silent) {\n    console.warn('marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options');\n  }\n}\n\n// copied from https://stackoverflow.com/a/5450113/806777\n/**\n * @param {string} pattern\n * @param {number} count\n */\nfunction repeatString(pattern, count) {\n  if (count < 1) {\n    return '';\n  }\n  let result = '';\n  while (count > 1) {\n    if (count & 1) {\n      result += pattern;\n    }\n    count >>= 1;\n    pattern += pattern;\n  }\n  return result + pattern;\n}\n\nfunction outputLink(cap, link, raw, lexer) {\n  const href = link.href;\n  const title = link.title ? escape(link.title) : null;\n  const text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n\n  if (cap[0].charAt(0) !== '!') {\n    lexer.state.inLink = true;\n    const token = {\n      type: 'link',\n      raw,\n      href,\n      title,\n      text,\n      tokens: lexer.inlineTokens(text, [])\n    };\n    lexer.state.inLink = false;\n    return token;\n  } else {\n    return {\n      type: 'image',\n      raw,\n      href,\n      title,\n      text: escape(text)\n    };\n  }\n}\n\nfunction indentCodeCompensation(raw, text) {\n  const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n\n  if (matchIndentToCode === null) {\n    return text;\n  }\n\n  const indentToCode = matchIndentToCode[1];\n\n  return text\n    .split('\\n')\n    .map(node => {\n      const matchIndentInNode = node.match(/^\\s+/);\n      if (matchIndentInNode === null) {\n        return node;\n      }\n\n      const [indentInNode] = matchIndentInNode;\n\n      if (indentInNode.length >= indentToCode.length) {\n        return node.slice(indentToCode.length);\n      }\n\n      return node;\n    })\n    .join('\\n');\n}\n\n/**\n * Tokenizer\n */\nclass Tokenizer {\n  constructor(options) {\n    this.options = options || defaults;\n  }\n\n  space(src) {\n    const cap = this.rules.block.newline.exec(src);\n    if (cap && cap[0].length > 0) {\n      return {\n        type: 'space',\n        raw: cap[0]\n      };\n    }\n  }\n\n  code(src) {\n    const cap = this.rules.block.code.exec(src);\n    if (cap) {\n      const text = cap[0].replace(/^ {1,4}/gm, '');\n      return {\n        type: 'code',\n        raw: cap[0],\n        codeBlockStyle: 'indented',\n        text: !this.options.pedantic\n          ? rtrim(text, '\\n')\n          : text\n      };\n    }\n  }\n\n  fences(src) {\n    const cap = this.rules.block.fences.exec(src);\n    if (cap) {\n      const raw = cap[0];\n      const text = indentCodeCompensation(raw, cap[3] || '');\n\n      return {\n        type: 'code',\n        raw,\n        lang: cap[2] ? cap[2].trim() : cap[2],\n        text\n      };\n    }\n  }\n\n  heading(src) {\n    const cap = this.rules.block.heading.exec(src);\n    if (cap) {\n      let text = cap[2].trim();\n\n      // remove trailing #s\n      if (/#$/.test(text)) {\n        const trimmed = rtrim(text, '#');\n        if (this.options.pedantic) {\n          text = trimmed.trim();\n        } else if (!trimmed || / $/.test(trimmed)) {\n          // CommonMark requires space before trailing #s\n          text = trimmed.trim();\n        }\n      }\n\n      const token = {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[1].length,\n        text: text,\n        tokens: []\n      };\n      this.lexer.inline(token.text, token.tokens);\n      return token;\n    }\n  }\n\n  hr(src) {\n    const cap = this.rules.block.hr.exec(src);\n    if (cap) {\n      return {\n        type: 'hr',\n        raw: cap[0]\n      };\n    }\n  }\n\n  blockquote(src) {\n    const cap = this.rules.block.blockquote.exec(src);\n    if (cap) {\n      const text = cap[0].replace(/^ *>[ \\t]?/gm, '');\n\n      return {\n        type: 'blockquote',\n        raw: cap[0],\n        tokens: this.lexer.blockTokens(text, []),\n        text\n      };\n    }\n  }\n\n  list(src) {\n    let cap = this.rules.block.list.exec(src);\n    if (cap) {\n      let raw, istask, ischecked, indent, i, blankLine, endsWithBlankLine,\n        line, nextLine, rawLine, itemContents, endEarly;\n\n      let bull = cap[1].trim();\n      const isordered = bull.length > 1;\n\n      const list = {\n        type: 'list',\n        raw: '',\n        ordered: isordered,\n        start: isordered ? +bull.slice(0, -1) : '',\n        loose: false,\n        items: []\n      };\n\n      bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n\n      if (this.options.pedantic) {\n        bull = isordered ? bull : '[*+-]';\n      }\n\n      // Get next list item\n      const itemRegex = new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`);\n\n      // Check if current bullet point can start a new List Item\n      while (src) {\n        endEarly = false;\n        if (!(cap = itemRegex.exec(src))) {\n          break;\n        }\n\n        if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n          break;\n        }\n\n        raw = cap[0];\n        src = src.substring(raw.length);\n\n        line = cap[2].split('\\n', 1)[0];\n        nextLine = src.split('\\n', 1)[0];\n\n        if (this.options.pedantic) {\n          indent = 2;\n          itemContents = line.trimLeft();\n        } else {\n          indent = cap[2].search(/[^ ]/); // Find first non-space char\n          indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n          itemContents = line.slice(indent);\n          indent += cap[1].length;\n        }\n\n        blankLine = false;\n\n        if (!line && /^ *$/.test(nextLine)) { // Items begin with at most one blank line\n          raw += nextLine + '\\n';\n          src = src.substring(nextLine.length + 1);\n          endEarly = true;\n        }\n\n        if (!endEarly) {\n          const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])`);\n\n          // Check if following lines should be included in List Item\n          while (src) {\n            rawLine = src.split('\\n', 1)[0];\n            line = rawLine;\n\n            // Re-align to follow commonmark nesting rules\n            if (this.options.pedantic) {\n              line = line.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n            }\n\n            // End list item if found start of new bullet\n            if (nextBulletRegex.test(line)) {\n              break;\n            }\n\n            if (line.search(/[^ ]/) >= indent || !line.trim()) { // Dedent if possible\n              itemContents += '\\n' + line.slice(indent);\n            } else if (!blankLine) { // Until blank line, item doesn't need indentation\n              itemContents += '\\n' + line;\n            } else { // Otherwise, improper indentation ends this item\n              break;\n            }\n\n            if (!blankLine && !line.trim()) { // Check if current line is blank\n              blankLine = true;\n            }\n\n            raw += rawLine + '\\n';\n            src = src.substring(rawLine.length + 1);\n          }\n        }\n\n        if (!list.loose) {\n          // If the previous item ended with a blank line, the list is loose\n          if (endsWithBlankLine) {\n            list.loose = true;\n          } else if (/\\n *\\n *$/.test(raw)) {\n            endsWithBlankLine = true;\n          }\n        }\n\n        // Check for task list items\n        if (this.options.gfm) {\n          istask = /^\\[[ xX]\\] /.exec(itemContents);\n          if (istask) {\n            ischecked = istask[0] !== '[ ] ';\n            itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n          }\n        }\n\n        list.items.push({\n          type: 'list_item',\n          raw: raw,\n          task: !!istask,\n          checked: ischecked,\n          loose: false,\n          text: itemContents\n        });\n\n        list.raw += raw;\n      }\n\n      // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n      list.items[list.items.length - 1].raw = raw.trimRight();\n      list.items[list.items.length - 1].text = itemContents.trimRight();\n      list.raw = list.raw.trimRight();\n\n      const l = list.items.length;\n\n      // Item child tokens handled here at end because we needed to have the final item to trim it first\n      for (i = 0; i < l; i++) {\n        this.lexer.state.top = false;\n        list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n        const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n        const hasMultipleLineBreaks = spacers.every(t => {\n          const chars = t.raw.split('');\n          let lineBreaks = 0;\n          for (const char of chars) {\n            if (char === '\\n') {\n              lineBreaks += 1;\n            }\n            if (lineBreaks > 1) {\n              return true;\n            }\n          }\n\n          return false;\n        });\n\n        if (!list.loose && spacers.length && hasMultipleLineBreaks) {\n          // Having a single line break doesn't mean a list is loose. A single line break is terminating the last list item\n          list.loose = true;\n          list.items[i].loose = true;\n        }\n      }\n\n      return list;\n    }\n  }\n\n  html(src) {\n    const cap = this.rules.block.html.exec(src);\n    if (cap) {\n      const token = {\n        type: 'html',\n        raw: cap[0],\n        pre: !this.options.sanitizer\n          && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\n        text: cap[0]\n      };\n      if (this.options.sanitize) {\n        token.type = 'paragraph';\n        token.text = this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]);\n        token.tokens = [];\n        this.lexer.inline(token.text, token.tokens);\n      }\n      return token;\n    }\n  }\n\n  def(src) {\n    const cap = this.rules.block.def.exec(src);\n    if (cap) {\n      if (cap[3]) cap[3] = cap[3].substring(1, cap[3].length - 1);\n      const tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n      return {\n        type: 'def',\n        tag,\n        raw: cap[0],\n        href: cap[2],\n        title: cap[3]\n      };\n    }\n  }\n\n  table(src) {\n    const cap = this.rules.block.table.exec(src);\n    if (cap) {\n      const item = {\n        type: 'table',\n        header: splitCells(cap[1]).map(c => { return { text: c }; }),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        rows: cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : []\n      };\n\n      if (item.header.length === item.align.length) {\n        item.raw = cap[0];\n\n        let l = item.align.length;\n        let i, j, k, row;\n        for (i = 0; i < l; i++) {\n          if (/^ *-+: *$/.test(item.align[i])) {\n            item.align[i] = 'right';\n          } else if (/^ *:-+: *$/.test(item.align[i])) {\n            item.align[i] = 'center';\n          } else if (/^ *:-+ *$/.test(item.align[i])) {\n            item.align[i] = 'left';\n          } else {\n            item.align[i] = null;\n          }\n        }\n\n        l = item.rows.length;\n        for (i = 0; i < l; i++) {\n          item.rows[i] = splitCells(item.rows[i], item.header.length).map(c => { return { text: c }; });\n        }\n\n        // parse child tokens inside headers and cells\n\n        // header child tokens\n        l = item.header.length;\n        for (j = 0; j < l; j++) {\n          item.header[j].tokens = [];\n          this.lexer.inlineTokens(item.header[j].text, item.header[j].tokens);\n        }\n\n        // cell child tokens\n        l = item.rows.length;\n        for (j = 0; j < l; j++) {\n          row = item.rows[j];\n          for (k = 0; k < row.length; k++) {\n            row[k].tokens = [];\n            this.lexer.inlineTokens(row[k].text, row[k].tokens);\n          }\n        }\n\n        return item;\n      }\n    }\n  }\n\n  lheading(src) {\n    const cap = this.rules.block.lheading.exec(src);\n    if (cap) {\n      const token = {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[2].charAt(0) === '=' ? 1 : 2,\n        text: cap[1],\n        tokens: []\n      };\n      this.lexer.inline(token.text, token.tokens);\n      return token;\n    }\n  }\n\n  paragraph(src) {\n    const cap = this.rules.block.paragraph.exec(src);\n    if (cap) {\n      const token = {\n        type: 'paragraph',\n        raw: cap[0],\n        text: cap[1].charAt(cap[1].length - 1) === '\\n'\n          ? cap[1].slice(0, -1)\n          : cap[1],\n        tokens: []\n      };\n      this.lexer.inline(token.text, token.tokens);\n      return token;\n    }\n  }\n\n  text(src) {\n    const cap = this.rules.block.text.exec(src);\n    if (cap) {\n      const token = {\n        type: 'text',\n        raw: cap[0],\n        text: cap[0],\n        tokens: []\n      };\n      this.lexer.inline(token.text, token.tokens);\n      return token;\n    }\n  }\n\n  escape(src) {\n    const cap = this.rules.inline.escape.exec(src);\n    if (cap) {\n      return {\n        type: 'escape',\n        raw: cap[0],\n        text: escape(cap[1])\n      };\n    }\n  }\n\n  tag(src) {\n    const cap = this.rules.inline.tag.exec(src);\n    if (cap) {\n      if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n        this.lexer.state.inLink = true;\n      } else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n        this.lexer.state.inLink = false;\n      }\n      if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = true;\n      } else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = false;\n      }\n\n      return {\n        type: this.options.sanitize\n          ? 'text'\n          : 'html',\n        raw: cap[0],\n        inLink: this.lexer.state.inLink,\n        inRawBlock: this.lexer.state.inRawBlock,\n        text: this.options.sanitize\n          ? (this.options.sanitizer\n            ? this.options.sanitizer(cap[0])\n            : escape(cap[0]))\n          : cap[0]\n      };\n    }\n  }\n\n  link(src) {\n    const cap = this.rules.inline.link.exec(src);\n    if (cap) {\n      const trimmedUrl = cap[2].trim();\n      if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n        // commonmark requires matching angle brackets\n        if (!(/>$/.test(trimmedUrl))) {\n          return;\n        }\n\n        // ending angle bracket cannot be escaped\n        const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n        if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n          return;\n        }\n      } else {\n        // find closing parenthesis\n        const lastParenIndex = findClosingBracket(cap[2], '()');\n        if (lastParenIndex > -1) {\n          const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n          const linkLen = start + cap[1].length + lastParenIndex;\n          cap[2] = cap[2].substring(0, lastParenIndex);\n          cap[0] = cap[0].substring(0, linkLen).trim();\n          cap[3] = '';\n        }\n      }\n      let href = cap[2];\n      let title = '';\n      if (this.options.pedantic) {\n        // split pedantic href and title\n        const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n\n        if (link) {\n          href = link[1];\n          title = link[3];\n        }\n      } else {\n        title = cap[3] ? cap[3].slice(1, -1) : '';\n      }\n\n      href = href.trim();\n      if (/^</.test(href)) {\n        if (this.options.pedantic && !(/>$/.test(trimmedUrl))) {\n          // pedantic allows starting angle bracket without ending angle bracket\n          href = href.slice(1);\n        } else {\n          href = href.slice(1, -1);\n        }\n      }\n      return outputLink(cap, {\n        href: href ? href.replace(this.rules.inline._escapes, '$1') : href,\n        title: title ? title.replace(this.rules.inline._escapes, '$1') : title\n      }, cap[0], this.lexer);\n    }\n  }\n\n  reflink(src, links) {\n    let cap;\n    if ((cap = this.rules.inline.reflink.exec(src))\n        || (cap = this.rules.inline.nolink.exec(src))) {\n      let link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n      link = links[link.toLowerCase()];\n      if (!link || !link.href) {\n        const text = cap[0].charAt(0);\n        return {\n          type: 'text',\n          raw: text,\n          text\n        };\n      }\n      return outputLink(cap, link, cap[0], this.lexer);\n    }\n  }\n\n  emStrong(src, maskedSrc, prevChar = '') {\n    let match = this.rules.inline.emStrong.lDelim.exec(src);\n    if (!match) return;\n\n    // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n    if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u)) return;\n\n    const nextChar = match[1] || match[2] || '';\n\n    if (!nextChar || (nextChar && (prevChar === '' || this.rules.inline.punctuation.exec(prevChar)))) {\n      const lLength = match[0].length - 1;\n      let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n\n      const endReg = match[0][0] === '*' ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;\n      endReg.lastIndex = 0;\n\n      // Clip maskedSrc to same section of string as src (move to lexer?)\n      maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n\n      while ((match = endReg.exec(maskedSrc)) != null) {\n        rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n\n        if (!rDelim) continue; // skip single * in __abc*abc__\n\n        rLength = rDelim.length;\n\n        if (match[3] || match[4]) { // found another Left Delim\n          delimTotal += rLength;\n          continue;\n        } else if (match[5] || match[6]) { // either Left or Right Delim\n          if (lLength % 3 && !((lLength + rLength) % 3)) {\n            midDelimTotal += rLength;\n            continue; // CommonMark Emphasis Rules 9-10\n          }\n        }\n\n        delimTotal -= rLength;\n\n        if (delimTotal > 0) continue; // Haven't found enough closing delimiters\n\n        // Remove extra characters. *a*** -> *a*\n        rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n\n        // Create `em` if smallest delimiter has odd char count. *a***\n        if (Math.min(lLength, rLength) % 2) {\n          const text = src.slice(1, lLength + match.index + rLength);\n          return {\n            type: 'em',\n            raw: src.slice(0, lLength + match.index + rLength + 1),\n            text,\n            tokens: this.lexer.inlineTokens(text, [])\n          };\n        }\n\n        // Create 'strong' if smallest delimiter has even char count. **a***\n        const text = src.slice(2, lLength + match.index + rLength - 1);\n        return {\n          type: 'strong',\n          raw: src.slice(0, lLength + match.index + rLength + 1),\n          text,\n          tokens: this.lexer.inlineTokens(text, [])\n        };\n      }\n    }\n  }\n\n  codespan(src) {\n    const cap = this.rules.inline.code.exec(src);\n    if (cap) {\n      let text = cap[2].replace(/\\n/g, ' ');\n      const hasNonSpaceChars = /[^ ]/.test(text);\n      const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n      if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n        text = text.substring(1, text.length - 1);\n      }\n      text = escape(text, true);\n      return {\n        type: 'codespan',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n\n  br(src) {\n    const cap = this.rules.inline.br.exec(src);\n    if (cap) {\n      return {\n        type: 'br',\n        raw: cap[0]\n      };\n    }\n  }\n\n  del(src) {\n    const cap = this.rules.inline.del.exec(src);\n    if (cap) {\n      return {\n        type: 'del',\n        raw: cap[0],\n        text: cap[2],\n        tokens: this.lexer.inlineTokens(cap[2], [])\n      };\n    }\n  }\n\n  autolink(src, mangle) {\n    const cap = this.rules.inline.autolink.exec(src);\n    if (cap) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = escape(this.options.mangle ? mangle(cap[1]) : cap[1]);\n        href = 'mailto:' + text;\n      } else {\n        text = escape(cap[1]);\n        href = text;\n      }\n\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text\n          }\n        ]\n      };\n    }\n  }\n\n  url(src, mangle) {\n    let cap;\n    if (cap = this.rules.inline.url.exec(src)) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = escape(this.options.mangle ? mangle(cap[0]) : cap[0]);\n        href = 'mailto:' + text;\n      } else {\n        // do extended autolink path validation\n        let prevCapZero;\n        do {\n          prevCapZero = cap[0];\n          cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];\n        } while (prevCapZero !== cap[0]);\n        text = escape(cap[0]);\n        if (cap[1] === 'www.') {\n          href = 'http://' + text;\n        } else {\n          href = text;\n        }\n      }\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text\n          }\n        ]\n      };\n    }\n  }\n\n  inlineText(src, smartypants) {\n    const cap = this.rules.inline.text.exec(src);\n    if (cap) {\n      let text;\n      if (this.lexer.state.inRawBlock) {\n        text = this.options.sanitize ? (this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0])) : cap[0];\n      } else {\n        text = escape(this.options.smartypants ? smartypants(cap[0]) : cap[0]);\n      }\n      return {\n        type: 'text',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n}\n\n/**\n * Block-Level Grammar\n */\nconst block = {\n  newline: /^(?: *(?:\\n|$))+/,\n  code: /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/,\n  fences: /^ {0,3}(`{3,}(?=[^`\\n]*\\n)|~{3,})([^\\n]*)\\n(?:|([\\s\\S]*?)\\n)(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/,\n  hr: /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/,\n  heading: /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/,\n  blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,\n  list: /^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/,\n  html: '^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n    + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n    + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n    + ')',\n  def: /^ {0,3}\\[(label)\\]: *(?:\\n *)?<?([^\\s>]+)>?(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/,\n  table: noopTest,\n  lheading: /^([^\\n]+)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  // regex template, placeholders will be replaced according to different paragraph\n  // interruption rules of commonmark and the original markdown spec:\n  _paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/,\n  text: /^[^\\n]+/\n};\n\nblock._label = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nblock._title = /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/;\nblock.def = edit(block.def)\n  .replace('label', block._label)\n  .replace('title', block._title)\n  .getRegex();\n\nblock.bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nblock.listItemStart = edit(/^( *)(bull) */)\n  .replace('bull', block.bullet)\n  .getRegex();\n\nblock.list = edit(block.list)\n  .replace(/bull/g, block.bullet)\n  .replace('hr', '\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))')\n  .replace('def', '\\\\n+(?=' + block.def.source + ')')\n  .getRegex();\n\nblock._tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n  + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n  + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n  + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n  + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr'\n  + '|track|ul';\nblock._comment = /<!--(?!-?>)[\\s\\S]*?(?:-->|$)/;\nblock.html = edit(block.html, 'i')\n  .replace('comment', block._comment)\n  .replace('tag', block._tag)\n  .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n  .getRegex();\n\nblock.paragraph = edit(block._paragraph)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n  .replace('|table', '')\n  .replace('blockquote', ' {0,3}>')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n\nblock.blockquote = edit(block.blockquote)\n  .replace('paragraph', block.paragraph)\n  .getRegex();\n\n/**\n * Normal Block Grammar\n */\n\nblock.normal = merge({}, block);\n\n/**\n * GFM Block Grammar\n */\n\nblock.gfm = merge({}, block.normal, {\n  table: '^ *([^\\\\n ].*\\\\|.*)\\\\n' // Header\n    + ' {0,3}(?:\\\\| *)?(:?-+:? *(?:\\\\| *:?-+:? *)*)(?:\\\\| *)?' // Align\n    + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)' // Cells\n});\n\nblock.gfm.table = edit(block.gfm.table)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('blockquote', ' {0,3}>')\n  .replace('code', ' {4}[^\\\\n]')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // tables can be interrupted by type (6) html blocks\n  .getRegex();\n\nblock.gfm.paragraph = edit(block._paragraph)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n  .replace('table', block.gfm.table) // interrupt paragraphs with table\n  .replace('blockquote', ' {0,3}>')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\n\nblock.pedantic = merge({}, block.normal, {\n  html: edit(\n    '^ *(?:comment *(?:\\\\n|\\\\s*$)'\n    + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n    + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n    .replace('comment', block._comment)\n    .replace(/tag/g, '(?!(?:'\n      + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n      + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n      + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n    .getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n  heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n  fences: noopTest, // fences not supported\n  paragraph: edit(block.normal._paragraph)\n    .replace('hr', block.hr)\n    .replace('heading', ' *#{1,6} *[^\\n]')\n    .replace('lheading', block.lheading)\n    .replace('blockquote', ' {0,3}>')\n    .replace('|fences', '')\n    .replace('|list', '')\n    .replace('|html', '')\n    .getRegex()\n});\n\n/**\n * Inline-Level Grammar\n */\nconst inline = {\n  escape: /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,\n  autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,\n  url: noopTest,\n  tag: '^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>', // CDATA section\n  link: /^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/,\n  reflink: /^!?\\[(label)\\]\\[(ref)\\]/,\n  nolink: /^!?\\[(ref)\\](?:\\[\\])?/,\n  reflinkSearch: 'reflink|nolink(?!\\\\()',\n  emStrong: {\n    lDelim: /^(?:\\*+(?:([punct_])|[^\\s*]))|^_+(?:([punct*])|([^\\s_]))/,\n    //        (1) and (2) can only be a Right Delimiter. (3) and (4) can only be Left.  (5) and (6) can be either Left or Right.\n    //          () Skip orphan inside strong  () Consume to delim (1) #***                (2) a***#, a***                   (3) #***a, ***a                 (4) ***#              (5) #***#                 (6) a***a\n    rDelimAst: /^[^_*]*?\\_\\_[^_*]*?\\*[^_*]*?(?=\\_\\_)|[^*]+(?=[^*])|[punct_](\\*+)(?=[\\s]|$)|[^punct*_\\s](\\*+)(?=[punct_\\s]|$)|[punct_\\s](\\*+)(?=[^punct*_\\s])|[\\s](\\*+)(?=[punct_])|[punct_](\\*+)(?=[punct_])|[^punct*_\\s](\\*+)(?=[^punct*_\\s])/,\n    rDelimUnd: /^[^_*]*?\\*\\*[^_*]*?\\_[^_*]*?(?=\\*\\*)|[^_]+(?=[^_])|[punct*](\\_+)(?=[\\s]|$)|[^punct*_\\s](\\_+)(?=[punct*\\s]|$)|[punct*\\s](\\_+)(?=[^punct*_\\s])|[\\s](\\_+)(?=[punct*])|[punct*](\\_+)(?=[punct*])/ // ^- Not allowed for _\n  },\n  code: /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/,\n  br: /^( {2,}|\\\\)\\n(?!\\s*$)/,\n  del: noopTest,\n  text: /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/,\n  punctuation: /^([\\spunctuation])/\n};\n\n// list of punctuation marks from CommonMark spec\n// without * and _ to handle the different emphasis markers * and _\ninline._punctuation = '!\"#$%&\\'()+\\\\-.,/:;<=>?@\\\\[\\\\]`^{|}~';\ninline.punctuation = edit(inline.punctuation).replace(/punctuation/g, inline._punctuation).getRegex();\n\n// sequences em should skip over [title](link), `code`, <html>\ninline.blockSkip = /\\[[^\\]]*?\\]\\([^\\)]*?\\)|`[^`]*?`|<[^>]*?>/g;\ninline.escapedEmSt = /\\\\\\*|\\\\_/g;\n\ninline._comment = edit(block._comment).replace('(?:-->|$)', '-->').getRegex();\n\ninline.emStrong.lDelim = edit(inline.emStrong.lDelim)\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline.emStrong.rDelimAst = edit(inline.emStrong.rDelimAst, 'g')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline.emStrong.rDelimUnd = edit(inline.emStrong.rDelimUnd, 'g')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline._escapes = /\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/g;\n\ninline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;\ninline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;\ninline.autolink = edit(inline.autolink)\n  .replace('scheme', inline._scheme)\n  .replace('email', inline._email)\n  .getRegex();\n\ninline._attribute = /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/;\n\ninline.tag = edit(inline.tag)\n  .replace('comment', inline._comment)\n  .replace('attribute', inline._attribute)\n  .getRegex();\n\ninline._label = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\ninline._href = /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/;\ninline._title = /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/;\n\ninline.link = edit(inline.link)\n  .replace('label', inline._label)\n  .replace('href', inline._href)\n  .replace('title', inline._title)\n  .getRegex();\n\ninline.reflink = edit(inline.reflink)\n  .replace('label', inline._label)\n  .replace('ref', block._label)\n  .getRegex();\n\ninline.nolink = edit(inline.nolink)\n  .replace('ref', block._label)\n  .getRegex();\n\ninline.reflinkSearch = edit(inline.reflinkSearch, 'g')\n  .replace('reflink', inline.reflink)\n  .replace('nolink', inline.nolink)\n  .getRegex();\n\n/**\n * Normal Inline Grammar\n */\n\ninline.normal = merge({}, inline);\n\n/**\n * Pedantic Inline Grammar\n */\n\ninline.pedantic = merge({}, inline.normal, {\n  strong: {\n    start: /^__|\\*\\*/,\n    middle: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n    endAst: /\\*\\*(?!\\*)/g,\n    endUnd: /__(?!_)/g\n  },\n  em: {\n    start: /^_|\\*/,\n    middle: /^()\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)|^_(?=\\S)([\\s\\S]*?\\S)_(?!_)/,\n    endAst: /\\*(?!\\*)/g,\n    endUnd: /_(?!_)/g\n  },\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n    .replace('label', inline._label)\n    .getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n    .replace('label', inline._label)\n    .getRegex()\n});\n\n/**\n * GFM Inline Grammar\n */\n\ninline.gfm = merge({}, inline.normal, {\n  escape: edit(inline.escape).replace('])', '~|])').getRegex(),\n  _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,\n  url: /^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/,\n  _backpedal: /(?:[^?!.,:;*_~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,\n  del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n  text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n});\n\ninline.gfm.url = edit(inline.gfm.url, 'i')\n  .replace('email', inline.gfm._extended_email)\n  .getRegex();\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\ninline.breaks = merge({}, inline.gfm, {\n  br: edit(inline.br).replace('{2,}', '*').getRegex(),\n  text: edit(inline.gfm.text)\n    .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n    .replace(/\\{2,\\}/g, '*')\n    .getRegex()\n});\n\n/**\n * smartypants text replacement\n * @param {string} text\n */\nfunction smartypants(text) {\n  return text\n    // em-dashes\n    .replace(/---/g, '\\u2014')\n    // en-dashes\n    .replace(/--/g, '\\u2013')\n    // opening singles\n    .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018')\n    // closing singles & apostrophes\n    .replace(/'/g, '\\u2019')\n    // opening doubles\n    .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c')\n    // closing doubles\n    .replace(/\"/g, '\\u201d')\n    // ellipses\n    .replace(/\\.{3}/g, '\\u2026');\n}\n\n/**\n * mangle email addresses\n * @param {string} text\n */\nfunction mangle(text) {\n  let out = '',\n    i,\n    ch;\n\n  const l = text.length;\n  for (i = 0; i < l; i++) {\n    ch = text.charCodeAt(i);\n    if (Math.random() > 0.5) {\n      ch = 'x' + ch.toString(16);\n    }\n    out += '&#' + ch + ';';\n  }\n\n  return out;\n}\n\n/**\n * Block Lexer\n */\nclass Lexer {\n  constructor(options) {\n    this.tokens = [];\n    this.tokens.links = Object.create(null);\n    this.options = options || defaults;\n    this.options.tokenizer = this.options.tokenizer || new Tokenizer();\n    this.tokenizer = this.options.tokenizer;\n    this.tokenizer.options = this.options;\n    this.tokenizer.lexer = this;\n    this.inlineQueue = [];\n    this.state = {\n      inLink: false,\n      inRawBlock: false,\n      top: true\n    };\n\n    const rules = {\n      block: block.normal,\n      inline: inline.normal\n    };\n\n    if (this.options.pedantic) {\n      rules.block = block.pedantic;\n      rules.inline = inline.pedantic;\n    } else if (this.options.gfm) {\n      rules.block = block.gfm;\n      if (this.options.breaks) {\n        rules.inline = inline.breaks;\n      } else {\n        rules.inline = inline.gfm;\n      }\n    }\n    this.tokenizer.rules = rules;\n  }\n\n  /**\n   * Expose Rules\n   */\n  static get rules() {\n    return {\n      block,\n      inline\n    };\n  }\n\n  /**\n   * Static Lex Method\n   */\n  static lex(src, options) {\n    const lexer = new Lexer(options);\n    return lexer.lex(src);\n  }\n\n  /**\n   * Static Lex Inline Method\n   */\n  static lexInline(src, options) {\n    const lexer = new Lexer(options);\n    return lexer.inlineTokens(src);\n  }\n\n  /**\n   * Preprocessing\n   */\n  lex(src) {\n    src = src\n      .replace(/\\r\\n|\\r/g, '\\n');\n\n    this.blockTokens(src, this.tokens);\n\n    let next;\n    while (next = this.inlineQueue.shift()) {\n      this.inlineTokens(next.src, next.tokens);\n    }\n\n    return this.tokens;\n  }\n\n  /**\n   * Lexing\n   */\n  blockTokens(src, tokens = []) {\n    if (this.options.pedantic) {\n      src = src.replace(/\\t/g, '    ').replace(/^ +$/gm, '');\n    } else {\n      src = src.replace(/^( *)(\\t+)/gm, (_, leading, tabs) => {\n        return leading + '    '.repeat(tabs.length);\n      });\n    }\n\n    let token, lastToken, cutSrc, lastParagraphClipped;\n\n    while (src) {\n      if (this.options.extensions\n        && this.options.extensions.block\n        && this.options.extensions.block.some((extTokenizer) => {\n          if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return true;\n          }\n          return false;\n        })) {\n        continue;\n      }\n\n      // newline\n      if (token = this.tokenizer.space(src)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.length === 1 && tokens.length > 0) {\n          // if there's a single \\n as a spacer, it's terminating the last line,\n          // so move it there so that we don't get unecessary paragraph tags\n          tokens[tokens.length - 1].raw += '\\n';\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.code(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        // An indented code block cannot interrupt a paragraph.\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // fences\n      if (token = this.tokenizer.fences(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // heading\n      if (token = this.tokenizer.heading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // hr\n      if (token = this.tokenizer.hr(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // blockquote\n      if (token = this.tokenizer.blockquote(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // list\n      if (token = this.tokenizer.list(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // html\n      if (token = this.tokenizer.html(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // def\n      if (token = this.tokenizer.def(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.raw;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else if (!this.tokens.links[token.tag]) {\n          this.tokens.links[token.tag] = {\n            href: token.href,\n            title: token.title\n          };\n        }\n        continue;\n      }\n\n      // table (gfm)\n      if (token = this.tokenizer.table(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // lheading\n      if (token = this.tokenizer.lheading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // top-level paragraph\n      // prevent paragraph consuming extensions by clipping 'src' to extension start\n      cutSrc = src;\n      if (this.options.extensions && this.options.extensions.startBlock) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startBlock.forEach(function(getStartIndex) {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) { startIndex = Math.min(startIndex, tempStart); }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n        lastToken = tokens[tokens.length - 1];\n        if (lastParagraphClipped && lastToken.type === 'paragraph') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        lastParagraphClipped = (cutSrc.length !== src.length);\n        src = src.substring(token.raw.length);\n        continue;\n      }\n\n      // text\n      if (token = this.tokenizer.text(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && lastToken.type === 'text') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    this.state.top = true;\n    return tokens;\n  }\n\n  inline(src, tokens) {\n    this.inlineQueue.push({ src, tokens });\n  }\n\n  /**\n   * Lexing/Compiling\n   */\n  inlineTokens(src, tokens = []) {\n    let token, lastToken, cutSrc;\n\n    // String with links masked to avoid interference with em and strong\n    let maskedSrc = src;\n    let match;\n    let keepPrevChar, prevChar;\n\n    // Mask out reflinks\n    if (this.tokens.links) {\n      const links = Object.keys(this.tokens.links);\n      if (links.length > 0) {\n        while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n          if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n          }\n        }\n      }\n    }\n    // Mask out other blocks\n    while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n    }\n\n    // Mask out escaped em & strong delimiters\n    while ((match = this.tokenizer.rules.inline.escapedEmSt.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.escapedEmSt.lastIndex);\n    }\n\n    while (src) {\n      if (!keepPrevChar) {\n        prevChar = '';\n      }\n      keepPrevChar = false;\n\n      // extensions\n      if (this.options.extensions\n        && this.options.extensions.inline\n        && this.options.extensions.inline.some((extTokenizer) => {\n          if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return true;\n          }\n          return false;\n        })) {\n        continue;\n      }\n\n      // escape\n      if (token = this.tokenizer.escape(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // tag\n      if (token = this.tokenizer.tag(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // link\n      if (token = this.tokenizer.link(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // reflink, nolink\n      if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // em & strong\n      if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.codespan(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // br\n      if (token = this.tokenizer.br(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // del (gfm)\n      if (token = this.tokenizer.del(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // autolink\n      if (token = this.tokenizer.autolink(src, mangle)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // url (gfm)\n      if (!this.state.inLink && (token = this.tokenizer.url(src, mangle))) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // text\n      // prevent inlineText consuming extensions by clipping 'src' to extension start\n      cutSrc = src;\n      if (this.options.extensions && this.options.extensions.startInline) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startInline.forEach(function(getStartIndex) {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) { startIndex = Math.min(startIndex, tempStart); }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (token = this.tokenizer.inlineText(cutSrc, smartypants)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n          prevChar = token.raw.slice(-1);\n        }\n        keepPrevChar = true;\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    return tokens;\n  }\n}\n\n/**\n * Renderer\n */\nclass Renderer {\n  constructor(options) {\n    this.options = options || defaults;\n  }\n\n  code(code, infostring, escaped) {\n    const lang = (infostring || '').match(/\\S*/)[0];\n    if (this.options.highlight) {\n      const out = this.options.highlight(code, lang);\n      if (out != null && out !== code) {\n        escaped = true;\n        code = out;\n      }\n    }\n\n    code = code.replace(/\\n$/, '') + '\\n';\n\n    if (!lang) {\n      return '<pre><code>'\n        + (escaped ? code : escape(code, true))\n        + '</code></pre>\\n';\n    }\n\n    return '<pre><code class=\"'\n      + this.options.langPrefix\n      + escape(lang, true)\n      + '\">'\n      + (escaped ? code : escape(code, true))\n      + '</code></pre>\\n';\n  }\n\n  /**\n   * @param {string} quote\n   */\n  blockquote(quote) {\n    return `<blockquote>\\n${quote}</blockquote>\\n`;\n  }\n\n  html(html) {\n    return html;\n  }\n\n  /**\n   * @param {string} text\n   * @param {string} level\n   * @param {string} raw\n   * @param {any} slugger\n   */\n  heading(text, level, raw, slugger) {\n    if (this.options.headerIds) {\n      const id = this.options.headerPrefix + slugger.slug(raw);\n      return `<h${level} id=\"${id}\">${text}</h${level}>\\n`;\n    }\n\n    // ignore IDs\n    return `<h${level}>${text}</h${level}>\\n`;\n  }\n\n  hr() {\n    return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n  }\n\n  list(body, ordered, start) {\n    const type = ordered ? 'ol' : 'ul',\n      startatt = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n    return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n  }\n\n  /**\n   * @param {string} text\n   */\n  listitem(text) {\n    return `<li>${text}</li>\\n`;\n  }\n\n  checkbox(checked) {\n    return '<input '\n      + (checked ? 'checked=\"\" ' : '')\n      + 'disabled=\"\" type=\"checkbox\"'\n      + (this.options.xhtml ? ' /' : '')\n      + '> ';\n  }\n\n  /**\n   * @param {string} text\n   */\n  paragraph(text) {\n    return `<p>${text}</p>\\n`;\n  }\n\n  /**\n   * @param {string} header\n   * @param {string} body\n   */\n  table(header, body) {\n    if (body) body = `<tbody>${body}</tbody>`;\n\n    return '<table>\\n'\n      + '<thead>\\n'\n      + header\n      + '</thead>\\n'\n      + body\n      + '</table>\\n';\n  }\n\n  /**\n   * @param {string} content\n   */\n  tablerow(content) {\n    return `<tr>\\n${content}</tr>\\n`;\n  }\n\n  tablecell(content, flags) {\n    const type = flags.header ? 'th' : 'td';\n    const tag = flags.align\n      ? `<${type} align=\"${flags.align}\">`\n      : `<${type}>`;\n    return tag + content + `</${type}>\\n`;\n  }\n\n  /**\n   * span level renderer\n   * @param {string} text\n   */\n  strong(text) {\n    return `<strong>${text}</strong>`;\n  }\n\n  /**\n   * @param {string} text\n   */\n  em(text) {\n    return `<em>${text}</em>`;\n  }\n\n  /**\n   * @param {string} text\n   */\n  codespan(text) {\n    return `<code>${text}</code>`;\n  }\n\n  br() {\n    return this.options.xhtml ? '<br/>' : '<br>';\n  }\n\n  /**\n   * @param {string} text\n   */\n  del(text) {\n    return `<del>${text}</del>`;\n  }\n\n  /**\n   * @param {string} href\n   * @param {string} title\n   * @param {string} text\n   */\n  link(href, title, text) {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n    if (href === null) {\n      return text;\n    }\n    let out = '<a href=\"' + escape(href) + '\"';\n    if (title) {\n      out += ' title=\"' + title + '\"';\n    }\n    out += '>' + text + '</a>';\n    return out;\n  }\n\n  /**\n   * @param {string} href\n   * @param {string} title\n   * @param {string} text\n   */\n  image(href, title, text) {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n    if (href === null) {\n      return text;\n    }\n\n    let out = `<img src=\"${href}\" alt=\"${text}\"`;\n    if (title) {\n      out += ` title=\"${title}\"`;\n    }\n    out += this.options.xhtml ? '/>' : '>';\n    return out;\n  }\n\n  text(text) {\n    return text;\n  }\n}\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nclass TextRenderer {\n  // no need for block level renderers\n  strong(text) {\n    return text;\n  }\n\n  em(text) {\n    return text;\n  }\n\n  codespan(text) {\n    return text;\n  }\n\n  del(text) {\n    return text;\n  }\n\n  html(text) {\n    return text;\n  }\n\n  text(text) {\n    return text;\n  }\n\n  link(href, title, text) {\n    return '' + text;\n  }\n\n  image(href, title, text) {\n    return '' + text;\n  }\n\n  br() {\n    return '';\n  }\n}\n\n/**\n * Slugger generates header id\n */\nclass Slugger {\n  constructor() {\n    this.seen = {};\n  }\n\n  /**\n   * @param {string} value\n   */\n  serialize(value) {\n    return value\n      .toLowerCase()\n      .trim()\n      // remove html tags\n      .replace(/<[!\\/a-z].*?>/ig, '')\n      // remove unwanted chars\n      .replace(/[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,./:;<=>?@[\\]^`{|}~]/g, '')\n      .replace(/\\s/g, '-');\n  }\n\n  /**\n   * Finds the next safe (unique) slug to use\n   * @param {string} originalSlug\n   * @param {boolean} isDryRun\n   */\n  getNextSafeSlug(originalSlug, isDryRun) {\n    let slug = originalSlug;\n    let occurenceAccumulator = 0;\n    if (this.seen.hasOwnProperty(slug)) {\n      occurenceAccumulator = this.seen[originalSlug];\n      do {\n        occurenceAccumulator++;\n        slug = originalSlug + '-' + occurenceAccumulator;\n      } while (this.seen.hasOwnProperty(slug));\n    }\n    if (!isDryRun) {\n      this.seen[originalSlug] = occurenceAccumulator;\n      this.seen[slug] = 0;\n    }\n    return slug;\n  }\n\n  /**\n   * Convert string to unique id\n   * @param {object} [options]\n   * @param {boolean} [options.dryrun] Generates the next unique slug without\n   * updating the internal accumulator.\n   */\n  slug(value, options = {}) {\n    const slug = this.serialize(value);\n    return this.getNextSafeSlug(slug, options.dryrun);\n  }\n}\n\n/**\n * Parsing & Compiling\n */\nclass Parser {\n  constructor(options) {\n    this.options = options || defaults;\n    this.options.renderer = this.options.renderer || new Renderer();\n    this.renderer = this.options.renderer;\n    this.renderer.options = this.options;\n    this.textRenderer = new TextRenderer();\n    this.slugger = new Slugger();\n  }\n\n  /**\n   * Static Parse Method\n   */\n  static parse(tokens, options) {\n    const parser = new Parser(options);\n    return parser.parse(tokens);\n  }\n\n  /**\n   * Static Parse Inline Method\n   */\n  static parseInline(tokens, options) {\n    const parser = new Parser(options);\n    return parser.parseInline(tokens);\n  }\n\n  /**\n   * Parse Loop\n   */\n  parse(tokens, top = true) {\n    let out = '',\n      i,\n      j,\n      k,\n      l2,\n      l3,\n      row,\n      cell,\n      header,\n      body,\n      token,\n      ordered,\n      start,\n      loose,\n      itemBody,\n      item,\n      checked,\n      task,\n      checkbox,\n      ret;\n\n    const l = tokens.length;\n    for (i = 0; i < l; i++) {\n      token = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n        if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(token.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      switch (token.type) {\n        case 'space': {\n          continue;\n        }\n        case 'hr': {\n          out += this.renderer.hr();\n          continue;\n        }\n        case 'heading': {\n          out += this.renderer.heading(\n            this.parseInline(token.tokens),\n            token.depth,\n            unescape(this.parseInline(token.tokens, this.textRenderer)),\n            this.slugger);\n          continue;\n        }\n        case 'code': {\n          out += this.renderer.code(token.text,\n            token.lang,\n            token.escaped);\n          continue;\n        }\n        case 'table': {\n          header = '';\n\n          // header\n          cell = '';\n          l2 = token.header.length;\n          for (j = 0; j < l2; j++) {\n            cell += this.renderer.tablecell(\n              this.parseInline(token.header[j].tokens),\n              { header: true, align: token.align[j] }\n            );\n          }\n          header += this.renderer.tablerow(cell);\n\n          body = '';\n          l2 = token.rows.length;\n          for (j = 0; j < l2; j++) {\n            row = token.rows[j];\n\n            cell = '';\n            l3 = row.length;\n            for (k = 0; k < l3; k++) {\n              cell += this.renderer.tablecell(\n                this.parseInline(row[k].tokens),\n                { header: false, align: token.align[k] }\n              );\n            }\n\n            body += this.renderer.tablerow(cell);\n          }\n          out += this.renderer.table(header, body);\n          continue;\n        }\n        case 'blockquote': {\n          body = this.parse(token.tokens);\n          out += this.renderer.blockquote(body);\n          continue;\n        }\n        case 'list': {\n          ordered = token.ordered;\n          start = token.start;\n          loose = token.loose;\n          l2 = token.items.length;\n\n          body = '';\n          for (j = 0; j < l2; j++) {\n            item = token.items[j];\n            checked = item.checked;\n            task = item.task;\n\n            itemBody = '';\n            if (item.task) {\n              checkbox = this.renderer.checkbox(checked);\n              if (loose) {\n                if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                  item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                  if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                    item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                  }\n                } else {\n                  item.tokens.unshift({\n                    type: 'text',\n                    text: checkbox\n                  });\n                }\n              } else {\n                itemBody += checkbox;\n              }\n            }\n\n            itemBody += this.parse(item.tokens, loose);\n            body += this.renderer.listitem(itemBody, task, checked);\n          }\n\n          out += this.renderer.list(body, ordered, start);\n          continue;\n        }\n        case 'html': {\n          // TODO parse inline content if parameter markdown=1\n          out += this.renderer.html(token.text);\n          continue;\n        }\n        case 'paragraph': {\n          out += this.renderer.paragraph(this.parseInline(token.tokens));\n          continue;\n        }\n        case 'text': {\n          body = token.tokens ? this.parseInline(token.tokens) : token.text;\n          while (i + 1 < l && tokens[i + 1].type === 'text') {\n            token = tokens[++i];\n            body += '\\n' + (token.tokens ? this.parseInline(token.tokens) : token.text);\n          }\n          out += top ? this.renderer.paragraph(body) : body;\n          continue;\n        }\n\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return;\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n\n    return out;\n  }\n\n  /**\n   * Parse Inline Tokens\n   */\n  parseInline(tokens, renderer) {\n    renderer = renderer || this.renderer;\n    let out = '',\n      i,\n      token,\n      ret;\n\n    const l = tokens.length;\n    for (i = 0; i < l; i++) {\n      token = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n        if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(token.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      switch (token.type) {\n        case 'escape': {\n          out += renderer.text(token.text);\n          break;\n        }\n        case 'html': {\n          out += renderer.html(token.text);\n          break;\n        }\n        case 'link': {\n          out += renderer.link(token.href, token.title, this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'image': {\n          out += renderer.image(token.href, token.title, token.text);\n          break;\n        }\n        case 'strong': {\n          out += renderer.strong(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'em': {\n          out += renderer.em(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'codespan': {\n          out += renderer.codespan(token.text);\n          break;\n        }\n        case 'br': {\n          out += renderer.br();\n          break;\n        }\n        case 'del': {\n          out += renderer.del(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'text': {\n          out += renderer.text(token.text);\n          break;\n        }\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return;\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n    return out;\n  }\n}\n\n/**\n * Marked\n */\nfunction marked(src, opt, callback) {\n  // throw error in case of non string input\n  if (typeof src === 'undefined' || src === null) {\n    throw new Error('marked(): input parameter is undefined or null');\n  }\n  if (typeof src !== 'string') {\n    throw new Error('marked(): input parameter is of type '\n      + Object.prototype.toString.call(src) + ', string expected');\n  }\n\n  if (typeof opt === 'function') {\n    callback = opt;\n    opt = null;\n  }\n\n  opt = merge({}, marked.defaults, opt || {});\n  checkSanitizeDeprecation(opt);\n\n  if (callback) {\n    const highlight = opt.highlight;\n    let tokens;\n\n    try {\n      tokens = Lexer.lex(src, opt);\n    } catch (e) {\n      return callback(e);\n    }\n\n    const done = function(err) {\n      let out;\n\n      if (!err) {\n        try {\n          if (opt.walkTokens) {\n            marked.walkTokens(tokens, opt.walkTokens);\n          }\n          out = Parser.parse(tokens, opt);\n        } catch (e) {\n          err = e;\n        }\n      }\n\n      opt.highlight = highlight;\n\n      return err\n        ? callback(err)\n        : callback(null, out);\n    };\n\n    if (!highlight || highlight.length < 3) {\n      return done();\n    }\n\n    delete opt.highlight;\n\n    if (!tokens.length) return done();\n\n    let pending = 0;\n    marked.walkTokens(tokens, function(token) {\n      if (token.type === 'code') {\n        pending++;\n        setTimeout(() => {\n          highlight(token.text, token.lang, function(err, code) {\n            if (err) {\n              return done(err);\n            }\n            if (code != null && code !== token.text) {\n              token.text = code;\n              token.escaped = true;\n            }\n\n            pending--;\n            if (pending === 0) {\n              done();\n            }\n          });\n        }, 0);\n      }\n    });\n\n    if (pending === 0) {\n      done();\n    }\n\n    return;\n  }\n\n  try {\n    const tokens = Lexer.lex(src, opt);\n    if (opt.walkTokens) {\n      marked.walkTokens(tokens, opt.walkTokens);\n    }\n    return Parser.parse(tokens, opt);\n  } catch (e) {\n    e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n    if (opt.silent) {\n      return '<p>An error occurred:</p><pre>'\n        + escape(e.message + '', true)\n        + '</pre>';\n    }\n    throw e;\n  }\n}\n\n/**\n * Options\n */\n\nmarked.options =\nmarked.setOptions = function(opt) {\n  merge(marked.defaults, opt);\n  changeDefaults(marked.defaults);\n  return marked;\n};\n\nmarked.getDefaults = getDefaults;\n\nmarked.defaults = defaults;\n\n/**\n * Use Extension\n */\n\nmarked.use = function(...args) {\n  const opts = merge({}, ...args);\n  const extensions = marked.defaults.extensions || { renderers: {}, childTokens: {} };\n  let hasExtensions;\n\n  args.forEach((pack) => {\n    // ==-- Parse \"addon\" extensions --== //\n    if (pack.extensions) {\n      hasExtensions = true;\n      pack.extensions.forEach((ext) => {\n        if (!ext.name) {\n          throw new Error('extension name required');\n        }\n        if (ext.renderer) { // Renderer extensions\n          const prevRenderer = extensions.renderers ? extensions.renderers[ext.name] : null;\n          if (prevRenderer) {\n            // Replace extension with func to run new extension but fall back if false\n            extensions.renderers[ext.name] = function(...args) {\n              let ret = ext.renderer.apply(this, args);\n              if (ret === false) {\n                ret = prevRenderer.apply(this, args);\n              }\n              return ret;\n            };\n          } else {\n            extensions.renderers[ext.name] = ext.renderer;\n          }\n        }\n        if (ext.tokenizer) { // Tokenizer Extensions\n          if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n            throw new Error(\"extension level must be 'block' or 'inline'\");\n          }\n          if (extensions[ext.level]) {\n            extensions[ext.level].unshift(ext.tokenizer);\n          } else {\n            extensions[ext.level] = [ext.tokenizer];\n          }\n          if (ext.start) { // Function to check for start of token\n            if (ext.level === 'block') {\n              if (extensions.startBlock) {\n                extensions.startBlock.push(ext.start);\n              } else {\n                extensions.startBlock = [ext.start];\n              }\n            } else if (ext.level === 'inline') {\n              if (extensions.startInline) {\n                extensions.startInline.push(ext.start);\n              } else {\n                extensions.startInline = [ext.start];\n              }\n            }\n          }\n        }\n        if (ext.childTokens) { // Child tokens to be visited by walkTokens\n          extensions.childTokens[ext.name] = ext.childTokens;\n        }\n      });\n    }\n\n    // ==-- Parse \"overwrite\" extensions --== //\n    if (pack.renderer) {\n      const renderer = marked.defaults.renderer || new Renderer();\n      for (const prop in pack.renderer) {\n        const prevRenderer = renderer[prop];\n        // Replace renderer with func to run extension, but fall back if false\n        renderer[prop] = (...args) => {\n          let ret = pack.renderer[prop].apply(renderer, args);\n          if (ret === false) {\n            ret = prevRenderer.apply(renderer, args);\n          }\n          return ret;\n        };\n      }\n      opts.renderer = renderer;\n    }\n    if (pack.tokenizer) {\n      const tokenizer = marked.defaults.tokenizer || new Tokenizer();\n      for (const prop in pack.tokenizer) {\n        const prevTokenizer = tokenizer[prop];\n        // Replace tokenizer with func to run extension, but fall back if false\n        tokenizer[prop] = (...args) => {\n          let ret = pack.tokenizer[prop].apply(tokenizer, args);\n          if (ret === false) {\n            ret = prevTokenizer.apply(tokenizer, args);\n          }\n          return ret;\n        };\n      }\n      opts.tokenizer = tokenizer;\n    }\n\n    // ==-- Parse WalkTokens extensions --== //\n    if (pack.walkTokens) {\n      const walkTokens = marked.defaults.walkTokens;\n      opts.walkTokens = function(token) {\n        pack.walkTokens.call(this, token);\n        if (walkTokens) {\n          walkTokens.call(this, token);\n        }\n      };\n    }\n\n    if (hasExtensions) {\n      opts.extensions = extensions;\n    }\n\n    marked.setOptions(opts);\n  });\n};\n\n/**\n * Run callback for every token\n */\n\nmarked.walkTokens = function(tokens, callback) {\n  for (const token of tokens) {\n    callback.call(marked, token);\n    switch (token.type) {\n      case 'table': {\n        for (const cell of token.header) {\n          marked.walkTokens(cell.tokens, callback);\n        }\n        for (const row of token.rows) {\n          for (const cell of row) {\n            marked.walkTokens(cell.tokens, callback);\n          }\n        }\n        break;\n      }\n      case 'list': {\n        marked.walkTokens(token.items, callback);\n        break;\n      }\n      default: {\n        if (marked.defaults.extensions && marked.defaults.extensions.childTokens && marked.defaults.extensions.childTokens[token.type]) { // Walk any extensions\n          marked.defaults.extensions.childTokens[token.type].forEach(function(childTokens) {\n            marked.walkTokens(token[childTokens], callback);\n          });\n        } else if (token.tokens) {\n          marked.walkTokens(token.tokens, callback);\n        }\n      }\n    }\n  }\n};\n\n/**\n * Parse Inline\n * @param {string} src\n */\nmarked.parseInline = function(src, opt) {\n  // throw error in case of non string input\n  if (typeof src === 'undefined' || src === null) {\n    throw new Error('marked.parseInline(): input parameter is undefined or null');\n  }\n  if (typeof src !== 'string') {\n    throw new Error('marked.parseInline(): input parameter is of type '\n      + Object.prototype.toString.call(src) + ', string expected');\n  }\n\n  opt = merge({}, marked.defaults, opt || {});\n  checkSanitizeDeprecation(opt);\n\n  try {\n    const tokens = Lexer.lexInline(src, opt);\n    if (opt.walkTokens) {\n      marked.walkTokens(tokens, opt.walkTokens);\n    }\n    return Parser.parseInline(tokens, opt);\n  } catch (e) {\n    e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n    if (opt.silent) {\n      return '<p>An error occurred:</p><pre>'\n        + escape(e.message + '', true)\n        + '</pre>';\n    }\n    throw e;\n  }\n};\n\n/**\n * Expose\n */\nmarked.Parser = Parser;\nmarked.parser = Parser.parse;\nmarked.Renderer = Renderer;\nmarked.TextRenderer = TextRenderer;\nmarked.Lexer = Lexer;\nmarked.lexer = Lexer.lex;\nmarked.Tokenizer = Tokenizer;\nmarked.Slugger = Slugger;\nmarked.parse = marked;\n\nconst options = marked.options;\nconst setOptions = marked.setOptions;\nconst use = marked.use;\nconst walkTokens = marked.walkTokens;\nconst parseInline = marked.parseInline;\nconst parse = marked;\nconst parser = Parser.parse;\nconst lexer = Lexer.lex;\n\nexport { Lexer, Parser, Renderer, Slugger, TextRenderer, Tokenizer, defaults, getDefaults, lexer, marked, options, parse, parseInline, parser, setOptions, use, walkTokens };\n"],"names":["baseUrl","breaks","extensions","gfm","headerIds","headerPrefix","highlight","langPrefix","mangle","pedantic","renderer","sanitize","sanitizer","silent","smartLists","smartypants","tokenizer","walkTokens","xhtml","defaults","getDefaults","newDefaults","escapeTest","escapeReplace","escapeTestNoEncode","escapeReplaceNoEncode","escapeReplacements","getEscapeReplacement","ch","html","encode","test","replace","unescapeTest","_","n","toLowerCase","charAt","String","fromCharCode","parseInt","substring","caret","regex","opt","source","obj","name","val","getRegex","RegExp","nonWordAndColonTest","originIndependentUrl","base","href","prot","decodeURIComponent","unescape","indexOf","resolveUrl","encodeURI","baseUrls","justDomain","protocol","domain","rtrim","relativeBase","noopTest","exec","i","target","key","arguments","length","Object","prototype","hasOwnProperty","call","tableRow","count","row","match","offset","str","escaped","curr","cells","split","trim","shift","pop","splice","push","c","invert","l","suffLen","currChar","slice","b","level","console","warn","pattern","result","cap","link","raw","lexer","title","escape","text","state","inLink","token","type","tokens","inlineTokens","matchIndentToCode","indentToCode","map","node","matchIndentInNode","indentInNode","join","Tokenizer","options","space","src","rules","block","newline","code","codeBlockStyle","fences","indentCodeCompensation","lang","heading","trimmed","depth","inline","hr","blockquote","blockTokens","list","istask","ischecked","indent","blankLine","endsWithBlankLine","line","nextLine","rawLine","itemContents","endEarly","bull","isordered","ordered","start","loose","items","itemRegex","trimLeft","search","nextBulletRegex","Math","min","task","checked","trimRight","top","spacers","filter","t","hasMultipleLineBreaks","every","chars","lineBreaks","char","pre","def","tag","table","item","header","splitCells","align","rows","j","k","lheading","paragraph","inRawBlock","trimmedUrl","rtrimSlash","lastParenIndex","findClosingBracket","linkLen","outputLink","_escapes","reflink","links","nolink","emStrong","maskedSrc","prevChar","lDelim","nextChar","punctuation","lLength","rDelim","rLength","delimTotal","midDelimTotal","endReg","rDelimAst","rDelimUnd","lastIndex","index","codespan","hasNonSpaceChars","hasSpaceCharsOnBothEnds","br","del","autolink","url","prevCapZero","_backpedal","inlineText","_paragraph","_label","_title","edit","bullet","listItemStart","_tag","_comment","normal","merge","reflinkSearch","_punctuation","blockSkip","escapedEmSt","_scheme","_email","_attribute","_href","strong","middle","endAst","endUnd","em","_extended_email","out","charCodeAt","random","toString","Lexer","create","inlineQueue","lex","lexInline","next","leading","tabs","repeat","lastToken","cutSrc","lastParagraphClipped","some","extTokenizer","startBlock","startIndex","Infinity","tempSrc","tempStart","forEach","getStartIndex","errMsg","error","Error","keepPrevChar","keys","includes","lastIndexOf","repeatString","startInline","Renderer","infostring","quote","slugger","id","slug","body","startatt","listitem","checkbox","tablerow","content","tablecell","flags","cleanUrl","image","TextRenderer","Slugger","seen","serialize","value","getNextSafeSlug","originalSlug","isDryRun","occurenceAccumulator","dryrun","Parser","textRenderer","parse","parser","parseInline","l2","l3","cell","itemBody","ret","renderers","unshift","callback","marked","checkSanitizeDeprecation","e","done","err","pending","setTimeout","message","setOptions","changeDefaults","use","args","opts","childTokens","hasExtensions","pack","ext","prevRenderer","apply","prop","prevTokenizer"],"mappings":"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"}